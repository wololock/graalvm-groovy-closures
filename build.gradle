import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'
apply plugin: 'application'

repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy:2.5.7'
}

mainClassName = 'example.App'

compileGroovy {
    configure(groovyOptions) {
        configurationScript = file("$rootDir/config/groovy/compiler-config.groovy")
    }
}

task finalize << {
    println "Generating reflection configuration with native-image-agent..."
    def javaAgentProcess = ["java", "-agentlib:native-image-agent=config-output-dir=config/native-image/", "-jar", "build/libs/graalvm-groovy-closures-all.jar"].execute()
    javaAgentProcess.waitFor()

    println "Cleaning up reflection configuration class"
    def classes = [
            "java.lang.reflect.Executable"
    ]
    def file = new File("./config/native-image/reflect-config.json")
    def root = new JsonSlurper().parse(file)

    def filtered = root.findAll { !(it.name in classes) }

    file.newWriter().withWriter {
        it << JsonOutput.prettyPrint(JsonOutput.toJson(filtered)).replaceAll("    ", "  ")
    }

    println "Done!"
}

shadowJar.finalizedBy(finalize)
